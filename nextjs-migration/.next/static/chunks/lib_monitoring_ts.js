"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["lib_monitoring_ts"],{

/***/ "./lib/monitoring.ts":
/*!***************************!*\
  !*** ./lib/monitoring.ts ***!
  \***************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MonitoringService: function() { return /* binding */ MonitoringService; },\n/* harmony export */   monitoring: function() { return /* binding */ monitoring; }\n/* harmony export */ });\n// Simple throttle function for browser compatibility\nconst throttle = (func, delay)=>{\n    let inThrottle;\n    return function() {\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        if (!inThrottle) {\n            func.apply(null, args);\n            inThrottle = true;\n            setTimeout(()=>inThrottle = false, delay);\n        }\n    };\n};\nclass MonitoringService {\n    startMonitoring() {\n        if (this.isMonitoring || \"object\" === \"undefined\") return;\n        this.isMonitoring = true;\n        this.initializeMonitoring();\n        console.log(\"\\uD83D\\uDD0D TimeVault monitoring started\");\n    }\n    stopMonitoring() {\n        this.isMonitoring = false;\n        this.monitoringIntervals.forEach((interval)=>clearInterval(interval));\n        this.monitoringIntervals = [];\n        console.log(\"\\uD83D\\uDD0D TimeVault monitoring stopped\");\n    }\n    initializeMonitoring() {\n        if (false) {}\n        // Performance monitoring\n        this.monitorPerformance();\n        // Error monitoring\n        this.monitorErrors();\n        // User behavior monitoring\n        this.monitorUserBehavior();\n        // Resource monitoring\n        this.monitorResources();\n        // Network monitoring\n        this.monitorNetwork();\n    }\n    monitorPerformance() {\n        if (false) {}\n        // Monitor page load times\n        if (document.readyState === \"loading\") {\n            window.addEventListener(\"load\", ()=>{\n                const loadTime = performance.timing.loadEventEnd - performance.timing.navigationStart;\n                this.recordMetric(\"page_load_time\", loadTime);\n                if (loadTime > 3000) {\n                    this.triggerAlert(\"slow_page_load\", loadTime);\n                }\n            });\n        }\n        // Monitor FPS and frame drops\n        let lastFrameTime = performance.now();\n        let frameCount = 0;\n        let frameTimes = [];\n        const monitorFrame = ()=>{\n            const currentTime = performance.now();\n            const frameTime = currentTime - lastFrameTime;\n            frameCount++;\n            frameTimes.push(frameTime);\n            if (frameTimes.length > 60) frameTimes.shift(); // Keep last 60 frames\n            // Calculate average FPS every second\n            if (frameCount % 60 === 0) {\n                const avgFrameTime = frameTimes.reduce((a, b)=>a + b, 0) / frameTimes.length;\n                const fps = 1000 / avgFrameTime;\n                this.recordMetric(\"fps\", fps);\n                if (fps < 30) {\n                    this.triggerAlert(\"low_fps\", fps);\n                }\n            }\n            lastFrameTime = currentTime;\n            requestAnimationFrame(monitorFrame);\n        };\n        requestAnimationFrame(monitorFrame);\n    }\n    monitorErrors() {\n        if (false) {}\n        window.addEventListener(\"error\", (event)=>{\n            this.recordMetric(\"js_errors\", 1);\n            console.error(\"JS Error:\", event.error);\n        });\n        window.addEventListener(\"unhandledrejection\", (event)=>{\n            this.recordMetric(\"promise_rejections\", 1);\n            console.error(\"Unhandled Promise Rejection:\", event.reason);\n        });\n    }\n    monitorUserBehavior() {\n        if (false) {}\n        // Monitor click interactions\n        document.addEventListener(\"click\", throttle((event)=>{\n            const target = event.target;\n            this.recordMetric(\"user_clicks\", 1);\n            // Track specific interactions\n            if (target.closest(\".nav-tab\")) {\n                this.recordMetric(\"tab_switches\", 1);\n            }\n            if (target.closest(\".calculator-btn\")) {\n                this.recordMetric(\"calculator_usage\", 1);\n            }\n        }, 100));\n        // Monitor scroll behavior\n        window.addEventListener(\"scroll\", throttle(()=>{\n            this.recordMetric(\"scroll_events\", 1);\n        }, 200));\n    }\n    monitorResources() {\n        if (false) {}\n        const interval = setInterval(()=>{\n            // Memory usage monitoring\n            if (\"memory\" in performance) {\n                const memory = performance.memory;\n                const memoryUsage = memory.usedJSHeapSize / memory.jsHeapSizeLimit * 100;\n                this.recordMetric(\"memory_usage\", memoryUsage);\n                if (memoryUsage > 80) {\n                    this.triggerAlert(\"high_memory_usage\", memoryUsage);\n                }\n            }\n            // DOM node count\n            const nodeCount = document.querySelectorAll(\"*\").length;\n            this.recordMetric(\"dom_nodes\", nodeCount);\n            if (nodeCount > 1000) {\n                this.triggerAlert(\"high_dom_count\", nodeCount);\n            }\n        }, 10000); // Every 10 seconds\n        this.monitoringIntervals.push(interval);\n    }\n    monitorNetwork() {\n        var _this = this;\n        if (false) {}\n        // Monitor network requests\n        const originalFetch = window.fetch;\n        window.fetch = async function() {\n            for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n                args[_key] = arguments[_key];\n            }\n            const startTime = performance.now();\n            try {\n                const response = await originalFetch(...args);\n                const endTime = performance.now();\n                const duration = endTime - startTime;\n                _this.recordMetric(\"api_response_time\", duration);\n                _this.recordMetric(\"api_requests\", 1);\n                if (duration > 5000) {\n                    _this.triggerAlert(\"slow_api_response\", duration);\n                }\n                return response;\n            } catch (error) {\n                _this.recordMetric(\"api_errors\", 1);\n                throw error;\n            }\n        };\n    }\n    recordMetric(name, value) {\n        if (!this.metrics.has(name)) {\n            this.metrics.set(name, []);\n        }\n        const values = this.metrics.get(name);\n        values.push(value);\n        // Keep only last 100 values to prevent memory issues\n        if (values.length > 100) {\n            values.shift();\n        }\n    }\n    setAlert(name, threshold, callback) {\n        this.alerts.set(name, {\n            threshold,\n            callback\n        });\n    }\n    triggerAlert(name, value) {\n        const alert = this.alerts.get(name);\n        if (alert && value > alert.threshold) {\n            alert.callback();\n        }\n    }\n    getMetrics() {\n        const result = {};\n        // Convert Map entries to array for compatibility\n        const entries = Array.from(this.metrics.entries());\n        for (const [name, values] of entries){\n            if (values.length > 0) {\n                result[name] = {\n                    current: values[values.length - 1],\n                    average: values.reduce((a, b)=>a + b, 0) / values.length,\n                    min: Math.min(...values),\n                    max: Math.max(...values),\n                    count: values.length\n                };\n            }\n        }\n        return result;\n    }\n    generateReport() {\n        const metrics = this.getMetrics();\n        const report = [\n            \"\\uD83D\\uDD0D TimeVault Performance Report\",\n            \"\"\n        ];\n        for (const [name, data] of Object.entries(metrics)){\n            report.push(\"\".concat(name, \": Current \").concat(data.current, \", Avg \").concat(data.average.toFixed(2)));\n        }\n        return report.join(\"\\\\n\");\n    }\n    constructor(){\n        this.metrics = new Map();\n        this.alerts = new Map();\n        this.isMonitoring = false;\n        this.monitoringIntervals = [];\n    }\n}\nconst monitoring = new MonitoringService();\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./lib/monitoring.ts\n"));

/***/ })

}]);