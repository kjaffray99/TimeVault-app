'use client'

import { Calculator, Download, FileText, Share2, TrendingUp } from 'lucide-react'
import { useState } from 'react'

interface ExportData {
  calculations: any[]
  portfolio: any[]
  preferences: any
  timestamp: string
}

export default function AdvancedExportSystem() {
  const [exportFormat, setExportFormat] = useState<'pdf' | 'csv' | 'json'>('pdf')
  const [exportData, setExportData] = useState<ExportData | null>(null)
  const [isExporting, setIsExporting] = useState(false)

  const generateExportData = (): ExportData => {
    // Collect all app data for export
    const calculations = JSON.parse(localStorage.getItem('timevault-calculations') || '[]')
    const portfolio = JSON.parse(localStorage.getItem('timevault-portfolio') || '[]')
    const preferences = JSON.parse(localStorage.getItem('timevault-preferences') || '{}')

    return {
      calculations,
      portfolio,
      preferences,
      timestamp: new Date().toISOString()
    }
  }

  const exportToPDF = async (data: ExportData) => {
    // Generate PDF report
    const reportHTML = `
      <!DOCTYPE html>
      <html>
      <head>
        <title>TimeVault AI - Calculation Report</title>
        <style>
          body { font-family: Arial, sans-serif; margin: 20px; }
          .header { text-align: center; color: #001F3F; margin-bottom: 30px; }
          .section { margin: 20px 0; padding: 15px; border: 1px solid #ddd; }
          .calculation { background: #f9f9f9; padding: 10px; margin: 10px 0; }
          .gold { color: #D4AF37; font-weight: bold; }
        </style>
      </head>
      <body>
        <div class="header">
          <h1>üè¶ TimeVault AI</h1>
          <h2>Cryptocurrency Calculation Report</h2>
          <p>Generated: ${new Date().toLocaleString()}</p>
        </div>
        
        <div class="section">
          <h3>Recent Calculations</h3>
          ${data.calculations.map(calc => `
            <div class="calculation">
              <strong>${calc.amount} ${calc.asset}</strong> = 
              <span class="gold">$${calc.totalValue?.toLocaleString()}</span> = 
              <span class="gold">${calc.metals?.gold?.toFixed(4)} oz Gold</span>
              <br><small>Date: ${new Date(calc.timestamp).toLocaleString()}</small>
            </div>
          `).join('')}
        </div>

        <div class="section">
          <h3>Portfolio Summary</h3>
          ${data.portfolio.length > 0 ?
        data.portfolio.map(asset => `
              <div class="calculation">
                <strong>${asset.symbol}:</strong> ${asset.amount} coins
                <br>Current Value: <span class="gold">$${(asset.amount * asset.currentPrice).toLocaleString()}</span>
              </div>
            `).join('') :
        '<p>No portfolio data available</p>'
      }
        </div>

        <div class="section">
          <p><small>Report generated by TimeVault AI - Premium Cryptocurrency Calculator</small></p>
        </div>
      </body>
      </html>
    `

    // Create and download PDF (simplified version)
    const blob = new Blob([reportHTML], { type: 'text/html' })
    const url = URL.createObjectURL(blob)
    const a = document.createElement('a')
    a.href = url
    a.download = `timevault-report-${new Date().toISOString().split('T')[0]}.html`
    document.body.appendChild(a)
    a.click()
    document.body.removeChild(a)
    URL.revokeObjectURL(url)
  }

  const exportToCSV = (data: ExportData) => {
    const csvContent = [
      'Date,Asset,Amount,Total Value,Gold Equivalent,Silver Equivalent',
      ...data.calculations.map(calc =>
        `${new Date(calc.timestamp).toLocaleDateString()},${calc.asset},${calc.amount},${calc.totalValue},${calc.metals?.gold},${calc.metals?.silver}`
      )
    ].join('\n')

    const blob = new Blob([csvContent], { type: 'text/csv' })
    const url = URL.createObjectURL(blob)
    const a = document.createElement('a')
    a.href = url
    a.download = `timevault-calculations-${new Date().toISOString().split('T')[0]}.csv`
    document.body.appendChild(a)
    a.click()
    document.body.removeChild(a)
    URL.revokeObjectURL(url)
  }

  const exportToJSON = (data: ExportData) => {
    const jsonContent = JSON.stringify(data, null, 2)
    const blob = new Blob([jsonContent], { type: 'application/json' })
    const url = URL.createObjectURL(blob)
    const a = document.createElement('a')
    a.href = url
    a.download = `timevault-data-${new Date().toISOString().split('T')[0]}.json`
    document.body.appendChild(a)
    a.click()
    document.body.removeChild(a)
    URL.revokeObjectURL(url)
  }

  const handleExport = async () => {
    setIsExporting(true)

    try {
      const data = generateExportData()
      setExportData(data)

      switch (exportFormat) {
        case 'pdf':
          await exportToPDF(data)
          break
        case 'csv':
          exportToCSV(data)
          break
        case 'json':
          exportToJSON(data)
          break
      }

      // Show success message
      if ('Notification' in window && Notification.permission === 'granted') {
        new Notification('Export Complete', {
          body: `Your ${exportFormat.toUpperCase()} export has been downloaded!`,
          icon: '/icon-192x192.png'
        })
      }
    } catch (error) {
      console.error('Export failed:', error)
      alert('Export failed. Please try again.')
    } finally {
      setIsExporting(false)
    }
  }

  const shareData = async () => {
    const data = generateExportData()
    const shareText = `My TimeVault AI Report:\n‚Ä¢ ${data.calculations.length} calculations\n‚Ä¢ ${data.portfolio.length} portfolio assets\n‚Ä¢ Generated: ${new Date().toLocaleDateString()}\n\nCheck out TimeVault AI for free crypto calculations!`

    if (navigator.share) {
      try {
        await navigator.share({
          title: 'TimeVault AI Report',
          text: shareText,
          url: window.location.href
        })
      } catch (error) {
        console.log('Share failed:', error)
      }
    } else {
      navigator.clipboard.writeText(shareText)
      alert('Report summary copied to clipboard!')
    }
  }

  return (
    <div className="bg-white/5 backdrop-blur-sm border border-white/10 rounded-lg p-6">
      <div className="flex items-center justify-between mb-6">
        <h3 className="text-lg font-semibold text-white flex items-center gap-2">
          <Download className="w-5 h-5 text-blue-400" />
          Export & Share
        </h3>
      </div>

      <div className="space-y-4">
        {/* Export Format Selection */}
        <div>
          <label className="block text-sm font-medium text-gray-300 mb-2">
            Export Format
          </label>
          <div className="grid grid-cols-3 gap-2">
            {(['pdf', 'csv', 'json'] as const).map((format) => (
              <button
                key={format}
                onClick={() => setExportFormat(format)}
                className={`flex items-center justify-center gap-2 p-3 rounded-lg transition-colors ${exportFormat === format
                    ? 'bg-blue-600 text-white'
                    : 'bg-white/10 text-gray-300 hover:bg-white/20'
                  }`}
              >
                {format === 'pdf' && <FileText className="w-4 h-4" />}
                {format === 'csv' && <TrendingUp className="w-4 h-4" />}
                {format === 'json' && <Calculator className="w-4 h-4" />}
                {format.toUpperCase()}
              </button>
            ))}
          </div>
        </div>

        {/* Export Description */}
        <div className="bg-white/5 rounded-lg p-4 text-sm text-gray-300">
          {exportFormat === 'pdf' && (
            <div className="flex items-start gap-2">
              <FileText className="w-4 h-4 mt-0.5 text-blue-400" />
              <div>
                <strong>PDF Report:</strong> Complete calculation history, portfolio summary, and formatted report for sharing or printing.
              </div>
            </div>
          )}
          {exportFormat === 'csv' && (
            <div className="flex items-start gap-2">
              <TrendingUp className="w-4 h-4 mt-0.5 text-green-400" />
              <div>
                <strong>CSV Data:</strong> Spreadsheet-compatible format with all calculation data for analysis in Excel or Google Sheets.
              </div>
            </div>
          )}
          {exportFormat === 'json' && (
            <div className="flex items-start gap-2">
              <Calculator className="w-4 h-4 mt-0.5 text-purple-400" />
              <div>
                <strong>JSON Backup:</strong> Complete data export including preferences, calculations, and portfolio for backup or migration.
              </div>
            </div>
          )}
        </div>

        {/* Export Actions */}
        <div className="flex gap-3">
          <button
            onClick={handleExport}
            disabled={isExporting}
            className="flex-1 flex items-center justify-center gap-2 px-4 py-3 bg-blue-600 hover:bg-blue-700 disabled:bg-blue-600/50 text-white rounded-lg transition-colors"
          >
            <Download className="w-4 h-4" />
            {isExporting ? 'Exporting...' : `Export ${exportFormat.toUpperCase()}`}
          </button>

          <button
            onClick={shareData}
            className="flex items-center justify-center gap-2 px-4 py-3 bg-green-600 hover:bg-green-700 text-white rounded-lg transition-colors"
          >
            <Share2 className="w-4 h-4" />
            Share
          </button>
        </div>

        {/* Export Stats */}
        {exportData && (
          <div className="grid grid-cols-2 gap-4 pt-4 border-t border-white/10">
            <div className="text-center">
              <div className="text-lg font-semibold text-white">{exportData.calculations.length}</div>
              <div className="text-sm text-gray-400">Calculations</div>
            </div>
            <div className="text-center">
              <div className="text-lg font-semibold text-white">{exportData.portfolio.length}</div>
              <div className="text-sm text-gray-400">Portfolio Assets</div>
            </div>
          </div>
        )}
      </div>
    </div>
  )
}
